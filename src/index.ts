import {
  app,
  BrowserWindow,
  Tray,
  Menu,
  nativeImage,
  shell,
  ipcMain,
} from "electron";
import path from "path";
import { spawn } from "child_process";
import fs from "fs";
import os from "os";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let tray: Tray = null;
let mainWindow: BrowserWindow = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 1200,
    width: 1600,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true, // Ensure context isolation
      nodeIntegration: false,
      webSecurity: false,
    },
  });
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.whenReady().then(() => {
  const trayIconPath = getImagePath('eltor-logo-24.png'); // TODO fix path for diff OS
  const trayIcon = nativeImage.createFromPath(trayIconPath);
  trayIcon.setTemplateImage(true);
  if (trayIcon.isEmpty()) {
    console.error(`Failed to load tray icon from path: ${trayIconPath}`);
    return;
  }
  tray = new Tray(trayIcon);
  // Create a context menu
  const contextMenu = Menu.buildFromTemplate([
    {
      label: "Activate (Connect to El Tor)", //"Status: Active",
      enabled: true,
      id: "menu-activate-connect",
      click: () => {
        trayNavigate("connect");
      },
    },
    {
      label: "Deactivate",
      enabled: false,
      id: "menu-deactivate-connect",
      click: () => {
        trayNavigate("deactivate-connect");
      },
    },
    { type: "separator" },
    {
      label: "Start Relay (Share bandwidth)", // "Status: Active Relay",
      enabled: true,
      id: "menu-activate-relay",
      click: () => {
        trayNavigate("relay");
      },
    },
    {
      label: "Deactivate Relay",
      enabled: false,
      id: "menu-deactivate-relay",
      click: () => {
        trayNavigate("deactivate-relay");
      },
    },
    { type: "separator" },
    {
      label: "Manage Wallet",
      click: () => {
        trayNavigate("wallet");
      },
    },
    {
      label: "Manage Relay",
      click: () => {
        trayNavigate("relay");
      },
    },
    { type: "separator" },
    {
      label: "About El Tor",
      click: () => shell.openExternal("https://devpost.com/software/el-tor"),
    },
    { label: "Quit El Tor", click: () => app.quit() },
  ]);
  // Optional: Set a tooltip for the tray icon
  tray.setToolTip("El Tor");
  // Set the context menu for the tray
  tray.setContextMenu(contextMenu);

  ipcMain.handle("get-menu-item-state", (event, itemId) => {
    const menuItem = contextMenu.getMenuItemById(itemId);
    if (menuItem) {
      return menuItem.enabled;
    } else {
      return null; // or throw an error, depending on how you want to handle it
    }
  });

  ipcMain.on("set-menu-item-state", (event, itemId, state) => {
    const menuItem = contextMenu.getMenuItemById(itemId);
    if (menuItem) {
      menuItem.enabled = state;
      tray.setContextMenu(Menu.buildFromTemplate(contextMenu.items)); // Rebuild the menu to reflect changes
    } else {
      console.error(`Menu item with id ${itemId} not found`);
    }
  });

  startWallet();
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
function startWallet() {
  const phoenixd = path.join(app.getAppPath(), "src/wallets/phoenix/phoenixd"); // or daemon executable
  const phoenixdProcess = spawn(phoenixd, [], {});
  const phoenixdConfig = path.join(os.homedir(), ".phoenix/phoenix.conf");
  fs.readFile(phoenixdConfig, "utf8", (err, data) => {
    if (err) {
      console.error("Error reading conf file:", err);
      return;
    }
    console.log("Config file contents:", data);
  });
}

function trayNavigate(path: string) {
  console.log(`Clicked ${path}`);
  if (mainWindow) {
    // Restore if minimized
    if (mainWindow.isMinimized()) {
      mainWindow.restore();
    }
    // Focus the window (bring to foreground)
    mainWindow.focus();
  }
  mainWindow.webContents.send(`navigate-to-${path}`);
}


function getImagePath(filename: string ) {
  const userDataPath = app.getPath('userData');
  console.log('userDataPath', userDataPath)

  let basePath;

  if (app.isPackaged) {
    // When packaged, use this path to navigate outside ASAR but within the app bundle
    basePath = path.join(app.getAppPath(), '..', 'assets'); // 'app' directory or wherever your assets are placed outside ASAR
  } else {
    basePath = path.join(process.cwd(), 'src', 'assets');
  }
  const imagePath = path.join(basePath, filename);

  if (fs.existsSync(imagePath)) {
    return imagePath;
  } else {
    console.error('Image not found at:', imagePath);
    return null;
  }
}